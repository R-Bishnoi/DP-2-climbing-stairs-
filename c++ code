class Solution{
	public:





// simple recursion
 /*  
 int nthPoint(int n){
	
	if(n==0 || n==1)return 1;
	
	int a=nthPoint(n-1);
	int b=nthPoint(n-2);
	
return a+b;
		    
}

*/









/*

// memoization technique
int ways(int n,int dp[]){
 if(n==0 || n==1)return 1;

dp[0]=1;
dp[1]=1;

 if(dp[n]!=-1)return dp[n];

else return dp[n]=(ways(n-1,dp)+ways(n-2,dp))%1000000007;
    
    
}


int nthPoint(int n){
	int dp[n+1];
for(int i=0;i<=n+1;i++)
  dp[i]=-1;
return ways(n,dp);
		    
}

};


*/








// space optimaization 
/*
 int nthPoint(int n){

   if(n==0 || n==1)return 1;
   
   int prev2=1;
   int prev1=1;
   int curr;
   for(int i=2;i<=n;i++){
     curr=(prev1+prev2)%1000000007;
      prev2=prev1;
     prev1=curr;
   
   }

return curr;		    
}

};

*/






// tabulation method 

int ways(int n,int dp[]){
    
    if(n==0 || n==1)return 1;
    dp[0]=1;
    dp[1]=1;
    
for(int i=2;i<=n;i++){
    dp[i]=(dp[i-1]+dp[i-2])%1000000007;
}
    
  return dp[n];  
}



int nthPoint(int n){
	int dp[n+1];
for(int i=0;i<=n+1;i++)
  dp[i]=-1;
  
return ways(n,dp);
		    
}

};
